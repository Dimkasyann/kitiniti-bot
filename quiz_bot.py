# === –ò–ú–ü–û–†–¢–´ ===
import json, os, random, pytz
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler,
    filters
)
from apscheduler.schedulers.background import BackgroundScheduler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8143738268:AAEE4CRYn8mtmNDpTU2okqhvPsIrFFKANFI"
TIMEZONE = pytz.timezone("Europe/Moscow")
QUIZ_TIME = {"hour": 9, "minute": 0}
REMINDER_TIME = {"hour": 8, "minute": 50}
HINT_DELAY_MINUTES = 30
ADMIN_ID = 1768526947
MAX_POINTS = 10
BONUS_FRIDAY = 3

# === –§–ê–ô–õ–´ ===
riddle_file = "riddles.json"
data_file = "data.json"
history_file = "history.json"
friday_file = "friday_riddles.json"

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
current_question = {}
friday_question = {}
answered_users = []
chat_ids = []
user_hints_shown = {}
sent_chats_today = []
start_sent_today = set()

# === –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ /start
last_handled_update_id = None

# === –ú–û–¢–ò–í–ê–¶–ò–Ø ===
MOTIVATION = [
    "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –î–∞–∂–µ –ö–∏—Ç–∏–ù–ò–¢–ò –∏–Ω–æ–≥–¥–∞ –æ—à–∏–±–∞–µ—Ç—Å—è üê≥",
    "–ú–∏–º–æ... –Ω–æ —Ç—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! ü§è",
    "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–¥—É–º–∞—Ç—å –∏–Ω–∞—á–µ üß†",
    "–û—à–∏–±–∫–∏ ‚Äî –ø—É—Ç—å –∫ –∏—Å—Ç–∏–Ω–µ! üßò",
    "–ö–∏—Ç–∏–ù–ò–¢–ò –≤–µ—Ä–∏—Ç –≤ —Ç–µ–±—è! üí™",
    "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ —Å–º–µ—à–Ω–æ ü§≠",
    "–û–π, –∞ –≤–µ–¥—å –ø–æ—á—Ç–∏! –ï—â—ë —Ä–∞–∑–æ–∫! üåÄ"
]

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def load_data():
    global answered_users
    try:
        with open(data_file, "r") as f:
            data = json.load(f)
            answered_users.clear()
            answered_users.extend([entry["id"] for entry in data.get("answered_today", [])])
            return data
    except:
        answered_users.clear()
        return {"scores": {}, "last_sent_date": "", "answered_today": [], "streaks": {}, "users": {}}

def save_data(data):
    with open(data_file, "w") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def load_riddles():
    try:
        with open(riddle_file, "r") as f:
            return json.load(f)
    except:
        return {"daily": {}, "friday": {}}
def load_friday_riddles():
    try:
        with open(friday_file, "r") as f:
            return json.load(f)
    except:
        return {}


def update_history(date_key, user_id):
    try:
        with open(history_file, "r") as f:
            history = json.load(f)
    except:
        history = {}

    if date_key not in history:
        history[date_key] = {
            "question": current_question.get("question"),
            "answer": current_question.get("answer"),
            "category": current_question.get("category"),
            "users_correct": []
        }

    if user_id not in history[date_key]["users_correct"]:
        history[date_key]["users_correct"].append(user_id)

    with open(history_file, "w") as f:
        json.dump(history, f, indent=2, ensure_ascii=False)

def get_level(score):
    if score >= 100: return "üëë –ì–µ–Ω–∏–π"
    elif score >= 50: return "üí° –ú–∞—Å—Ç–µ—Ä"
    elif score >= 20: return "üß† –ó–Ω–∞—Ç–æ–∫"
    return "üê£ –ù–æ–≤–∏—á–æ–∫"
    
def format_nitikoins(n: int) -> str:
    if 11 <= n % 100 <= 14:
        return f"{n} –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤"
    elif n % 10 == 1:
        return f"{n} –ù–ò–¢–ò–∫–æ–∏–Ω"
    elif 2 <= n % 10 <= 4:
        return f"{n} –ù–ò–¢–ò–∫–æ–∏–Ω–∞"
    else:
        return f"{n} –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤"

def update_streak(user_id, data):
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    streaks = data.get("streaks", {})
    streak = streaks.get(str(user_id), {"count": 0, "last_date": ""})
    last_date = streak["last_date"]

    if last_date == (datetime.now(TIMEZONE) - timedelta(days=1)).strftime("%Y-%m-%d"):
        streak["count"] += 1
    elif last_date != today:
        streak["count"] = 1

    streak["last_date"] = today
    streaks[str(user_id)] = streak
    data["streaks"] = streaks

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
def main_menu(user_id):
    rows = [
        ["üì© –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥–∞–¥–∫—É", "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"],
        ["üî• –ü—è—Ç–Ω–∏—á–Ω–∞—è —à–∞–ª–æ—Å—Ç—å"],
        ["üí∞ –ë–∞–ª–∞–Ω—Å", "üèÜ –†–µ–π—Ç–∏–Ω–≥"],
        ["üìò –ò—Å—Ç–æ—Ä–∏—è"]
    ]
    if user_id == ADMIN_ID:
        rows.append(["üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", "üßπ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "‚ûï –ù–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# === –°–¢–ê–†–¢ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    cid = update.effective_chat.id
    now = datetime.now(TIMEZONE)
    today = now.strftime("%Y-%m-%d")

    if cid not in chat_ids:
        chat_ids.append(cid)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! üê≥\n"
        "–Ø ‚Äî –ö–∏—Ç–∏–ù–ò–¢–ò, —Ç–≤–æ–π –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∫–∏—Ç!\n\n"
        "üéØ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —è –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ —Å–≤–µ–∂—É—é –∑–∞–≥–∞–¥–∫—É!\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.\n"
        "üèÖ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ù–ò–¢–ò–∫–æ–∏–Ω—ã –∏ —Ä–∞—Å—Ç—ë—à—å –≤ —É—Ä–æ–≤–Ω—è—Ö!\n\n"
        "üëá –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ: ‚åò",
        reply_markup=main_menu(uid)
    )

    # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data()

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–≥–∞–¥–∫—É, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –µ—â—ë –Ω–µ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ —ç—Ç–æ–º—É —á–∞—Ç—É
    if now.hour >= 9 and data.get("last_sent_date") == today and current_question:
        if cid not in sent_chats_today:
            await update.message.reply_text(f"üß† –ó–∞–≥–∞–¥–∫–∞ –¥–Ω—è:\n\n{current_question['question']}")
            sent_chats_today.append(cid)

# === –í–°–Ø –õ–û–ì–ò–ö–ê –ö–ù–û–ü–û–ö –ò –û–¢–í–ï–¢–û–í ===
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not update.message: return
    text = update.message.text.strip()
    data = load_data()
    now = datetime.now(TIMEZONE)
    today = now.strftime("%Y-%m-%d")

    # === –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–≥–∞–¥–∫–∏ ===
    if context.user_data.get("adding_riddle") and uid == ADMIN_ID:
        if text.count("///") == 4:
            try:
                date, q, a, hint, cat = [x.strip() for x in text.split("///")]
                r = {"question": q, "answer": a.lower(), "hint": hint, "category": cat}
                riddles = load_riddles()
                riddles["daily"][date] = r
                with open(riddle_file, "w") as f:
                    json.dump(riddles, f, indent=2, ensure_ascii=False)
                await update.message.reply_text(f"‚úÖ –ó–∞–≥–∞–¥–∫–∞ –Ω–∞ {date} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            except Exception as e:
                await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
            context.user_data["adding_riddle"] = False
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –¥–∞—Ç–∞///–≤–æ–ø—Ä–æ—Å///–æ—Ç–≤–µ—Ç///–ø–æ–¥—Å–∫–∞–∑–∫–∞///–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        return

    # === –ù–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞ ===
    if text == "‚ûï –ù–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞" and uid == ADMIN_ID:
        context.user_data["adding_riddle"] = True
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ –≤—Å—ë –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:\n–î–∞—Ç–∞(–ì–ì–ì–ì.–ú–ú.–î–î)///–í–æ–ø—Ä–æ—Å///–û—Ç–≤–µ—Ç///–ü–æ–¥—Å–∫–∞–∑–∫–∞///–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        return

    # === –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥–∞–¥–∫—É ===
    if text == "üì© –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥–∞–¥–∫—É":
        if not current_question:
            await update.message.reply_text("‚è≥ –ó–∞–≥–∞–¥–∫–∞ –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–∞. –ñ–¥–∏ 9:00 üïò")
        elif uid in answered_users:
            next_quiz = datetime.combine((now + timedelta(days=1)).date(), datetime.min.time(), tzinfo=TIMEZONE).replace(hour=QUIZ_TIME["hour"])
            diff = next_quiz - now
            h, rem = divmod(int(diff.total_seconds()), 3600)
            m = rem // 60
            await update.message.reply_text(f"üéâ –£–∂–µ —Ä–∞–∑–≥–∞–¥–∞–Ω–æ! –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ {h} —á {m} –º–∏–Ω.")
        else:
            await update.message.reply_text(f"üß† –ó–∞–≥–∞–¥–∫–∞:\n{current_question['question']}")
        return

    # === –ü–æ–¥—Å–∫–∞–∑–∫–∞ ===
    if text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞":
        qt = data.get("quiz_sent_time")
        if not qt: await update.message.reply_text("‚ùå –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥–∞–¥–∫–∏."); return
        quiz_time = datetime.fromisoformat(qt)
        delta = now - quiz_time
        if uid in answered_users:
            await update.message.reply_text("‚úÖ –£–∂–µ –æ—Ç–≥–∞–¥–∞–Ω–æ. –ñ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–≤—Ç—Ä–∞ –≤ 9:00")
        elif delta.total_seconds() < HINT_DELAY_MINUTES * 60:
            remain = HINT_DELAY_MINUTES - int(delta.total_seconds() // 60)
            await update.message.reply_text(f"‚è≥ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {remain} –º–∏–Ω.")
        else:
            await update.message.reply_text(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{current_question['hint']}")
        return

    # === –ë–∞–ª–∞–Ω—Å ===
    if text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        score = data["scores"].get(str(uid), 0)
        streak = data.get("streaks", {}).get(str(uid), {}).get("count", 0)
        level = get_level(score)
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {score} –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤\nüìä –£—Ä–æ–≤–µ–Ω—å: {level}\nüî• –°–µ—Ä–∏—è: {streak}")
        return

    # === –†–µ–π—Ç–∏–Ω–≥ ===
    if text == "üèÜ –†–µ–π—Ç–∏–Ω–≥":
        scores = data.get("scores", {})
        sorted_users = sorted(scores.items(), key=lambda x: x[1], reverse=True)
        medals = ["ü•á", "ü•à", "ü•â"]
        result = ["üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:"]
        for i, (uid_, score) in enumerate(sorted_users[:10], 1):
            try:
                u = await context.bot.get_chat(int(uid_))
                name = f"@{u.username}" if u.username else u.full_name
            except:
                name = f"User {uid_[-4:]}"
            result.append(f"{medals[i-1] if i<=3 else 'üéñ'} {i}. {name} ‚Äî {score}ü™ô")
        await update.message.reply_text("\n".join(result))
        return

    # === –ò—Å—Ç–æ—Ä–∏—è ===
    if text == "üìò –ò—Å—Ç–æ—Ä–∏—è":
        try:
            with open(history_file, "r") as f:
                history = json.load(f)
        except:
            history = {}
        entries = [f"üìÖ {d} ‚Äî [{h['category']}] {h['question']}" for d, h in sorted(history.items()) if uid in h.get("users_correct", [])]
        await update.message.reply_text("\n\n".join(entries[-10:]) if entries else "üòø –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫.")
        return

    # === –ü—è—Ç–Ω–∏—á–Ω–∞—è —à–∞–ª–æ—Å—Ç—å ===
    if text == "üî• –ü—è—Ç–Ω–∏—á–Ω–∞—è —à–∞–ª–æ—Å—Ç—å":
        if now.weekday() == 4:
            riddles = load_friday_riddles()
            friday = riddles.get(today)
            if friday:
                friday_question.update(friday)
                await update.message.reply_text(f"üôà –ü—è—Ç–Ω–∏—á–Ω–∞—è —à–∞–ª–æ—Å—Ç—å:\n{friday['question']}")
            else:
                await update.message.reply_text("‚ùå –ü—è—Ç–Ω–∏—á–Ω–∞—è –∑–∞–≥–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("üôÖ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ –ø—è—Ç–Ω–∏—Ü–∞!\n"
                "–ó–∞–≥–ª—è–Ω–∏ —Å—é–¥–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É –ø–æ—Å–ª–µ 9:00 ‚Äî –±—É–¥–µ—Ç üî• –æ—Å–æ–±–µ–Ω–Ω–∞—è –∑–∞–≥–∞–¥–∫–∞ –æ—Ç –ö–∏—Ç–∏–ù–ò–¢–ò üê≥")
        return

    # === –°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ===
    if text == "üßπ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" and uid == ADMIN_ID:
        save_data({"scores": {}, "last_sent_date": "", "answered_today": [], "streaks": {}, "users": {}})
        with open(history_file, "w") as f: json.dump({}, f)
        answered_users.clear()
        await update.message.reply_text("üßπ –í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ.")
        return

    if text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" and uid == ADMIN_ID:
        await send_daily_quiz(context.application, force=True)
        await update.message.reply_text("üîÅ –ó–∞–≥–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–Ω–æ–≤–æ.")
        return

    # === –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    if not current_question:
        await update.message.reply_text("‚è≥ –ñ–¥–∏ 9:00 ‚Äî –±—É–¥–µ—Ç –∑–∞–≥–∞–¥–∫–∞.")
        return

    if uid in answered_users:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ —Ä–∞–∑–≥–∞–¥–∞–ª! –ñ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é.")
        return

    if text.lower() == current_question["answer"].lower():
        place = len(answered_users) + 1
        points = max(MAX_POINTS - (place - 1), 1)
        data["scores"][str(uid)] = data["scores"].get(str(uid), 0) + points
        data["answered_today"].append({"id": uid})
        answered_users.append(uid)
        update_streak(uid, data)
        save_data(data)
        update_history(today, uid)
        await update.message.reply_text(f"üéâ –í–µ—Ä–Ω–æ! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å {format_nitikoins(points)}.")
    else:
        await update.message.reply_text(random.choice(MOTIVATION))

# === –û–¢–ü–†–ê–í–ö–ê –ó–ê–ì–ê–î–ö–ò ===
async def send_daily_quiz(app, force=False):
    global current_question, answered_users, sent_chats_today, user_hints_shown
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    data = load_data()

    if not force and data.get("last_sent_date") == today:
        return

    r = load_riddles().get("daily", {}).get(today)
    if not r: return

    current_question.clear()
    current_question.update(r)
    answered_users.clear()
    user_hints_shown.clear()
    sent_chats_today.clear()
    data["last_sent_date"] = today
    data["answered_today"] = []
    data["quiz_sent_time"] = datetime.now(TIMEZONE).isoformat()
    save_data(data)

    print(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≥–∞–¥–∫–∏ {today}:")
    for cid in chat_ids:
        try:
            await app.bot.send_message(cid, text=f"üß† –ó–∞–≥–∞–¥–∫–∞ –¥–Ω—è:\n{r['question']}", reply_markup=main_menu(ADMIN_ID))
            sent_chats_today.append(cid)
            print(f"‚úÖ –ó–∞–≥–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {cid}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {cid}: {e}")

# === –£–¢–†–û–ú ‚Äî –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ===
async def send_reminder(app):
    for cid in chat_ids:
        try:
            with open("media/start.gif", "rb") as gif:
                await app.bot.send_animation(
                    chat_id=cid,
                    animation=gif,
                    caption="‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è –≤ 9:00 –±—É–¥–µ—Ç –∑–∞–≥–∞–¥–∫–∞ –æ—Ç –ö–∏—Ç–∏–ù–ò–¢–ò üê≥\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å –º–æ–∑–≥–∏!",
                    reply_markup=main_menu(ADMIN_ID)
                )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É –≤ —á–∞—Ç {cid}: {e}")

# === –°–¢–ê–†–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.scheduler = BackgroundScheduler(timezone=TIMEZONE)
    app.scheduler.add_job(send_reminder, 'cron', hour=REMINDER_TIME["hour"], minute=REMINDER_TIME["minute"], args=[app])
    app.scheduler.add_job(send_daily_quiz, 'cron', hour=QUIZ_TIME["hour"], minute=QUIZ_TIME["minute"], args=[app])
    app.scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

    print("ü§ñ –ö–∏—Ç–∏–ù–ò–¢–ò –∑–∞–ø—É—â–µ–Ω. –ò –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–≥–∞–¥–∫–∞–º")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio, nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
